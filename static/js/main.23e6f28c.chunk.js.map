{"version":3,"sources":["components/Navbar.js","components/Header.js","components/Container.js","components/Clicky.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","Header","Container","props","class","children","Clicky","clickStyle","backgroundImage","concat","image","role","id","aria-label","alt","name","style","onClick","shuffleComposers","App","state","composers","_this","filter","composer","setState","components_Navbar","components_Header","components_Container","this","map","components_Clicky","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAoBeA,MAlBf,WACE,OAEAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SACZH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAR,gBAEFJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,IAAd,4BAEAH,EAAAC,EAAAC,cAAA,wCCDSG,MATf,WACE,OACEL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,wFCESI,MANf,SAAmBC,GACjB,OACEP,EAAAC,EAAAC,cAAA,QAAMM,MAAM,aAAaD,EAAME,WCUpBC,MAVf,SAAgBH,GACd,IAAMI,EAAa,CACjBC,gBAAe,OAAAC,OAASN,EAAMO,MAAf,MAGjB,OACEd,EAAAC,EAAAC,cAAA,OAAKa,KAAK,MAAMC,GAAIT,EAAMS,GAAIC,aAAW,aAAad,UAAU,aAAae,IAAKX,EAAMY,KAAMC,MAAOT,EAAYU,QAAS,kBAAMd,EAAMe,iBAAiBf,EAAMS,eC+BlJO,6MAhCbC,MAAQ,CACNC,eAGFH,iBAAmB,SAAAN,GAEjB,IAAMS,EAAYC,EAAKF,MAAMC,UAAUE,OAAO,SAAAC,GAAQ,OAAIA,EAASZ,KAAOA,IAE1EU,EAAKG,SAAS,CAAEJ,uFAMhB,OACEzB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4B,EAAD,MACA9B,EAAAC,EAAAC,cAAC6B,EAAD,MACA/B,EAAAC,EAAAC,cAAC8B,EAAD,KACCC,KAAKT,MAAMC,UAAUS,IAAI,SAAAN,GAAQ,OAChC5B,EAAAC,EAAAC,cAACiC,EAAD,CACEnB,GAAIY,EAASZ,GACbG,KAAMS,EAAST,KACfL,MAAOc,EAASd,mBAzBVsB,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.23e6f28c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Navbar() {\r\n  return (\r\n \r\n  <nav className=\"navbar\">\r\n    <ul>\r\n      <li className=\"brand\">\r\n        <a href=\"/\">Clicky Game</a>\r\n      </li>\r\n      <li className=\"\">Click an image to begin!\r\n      </li>\r\n      <li>Score: 0 | Top Score: 0\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n  );\r\n\r\n}\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>Clicky Game!</h1>\r\n      <h2>Click on an image to earn points, but don't click on any more than once!</h2>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Container(props) {\r\n  return (\r\n    <main class=\"container\">{props.children}</main>\r\n  );\r\n}\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\n\r\n\r\n\r\nfunction Clicky(props) {\r\n  const clickStyle = {\r\n    backgroundImage: `url(${props.image})`\r\n  };\r\n\r\n  return(\r\n    <div role=\"img\" id={props.id} aria-label=\"click item\" className=\"click-item\" alt={props.name} style={clickStyle} onClick={() => props.shuffleComposers(props.id)}></div>\r\n  )\r\n}\r\n\r\nexport default Clicky;","import React, { Component }from 'react';\r\nimport Navbar from \"./components/Navbar\";\r\nimport Header from \"./components/Header\";\r\nimport Container from './components/Container';\r\nimport Clicky from './components/Clicky';\r\nimport composers from \"./composers.json\";\r\n\r\nclass App extends Component {\r\n  // Setting this.state.friends to the friends json array\r\n  state = {\r\n    composers\r\n  };\r\n\r\n  shuffleComposers = id => {\r\n    // Filter this.state.friends for friends with an id not equal to the id being removed\r\n    const composers = this.state.composers.filter(composer => composer.id !== id);\r\n    // Set this.state.composers equal to the new friends array\r\n    this.setState({ composers });\r\n\r\n\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar />\r\n        <Header />\r\n        <Container>\r\n        {this.state.composers.map(composer => (\r\n          <Clicky\r\n            id={composer.id}\r\n            name={composer.name}\r\n            image={composer.image}\r\n          />\r\n        ))}\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}